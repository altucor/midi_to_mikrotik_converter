#pragma once

#include "mtrk.h"

#include "ChannelAnalyzer.hpp"
#include "Config.hpp"
#include "TrackAnalyzer.hpp"
#include "Utils.hpp"

#include "boost/log/trivial.hpp"

#include <fstream>
#include <iomanip>
#include <sstream>
#include <vector>

class MikrotikTrack
{
public:
    MikrotikTrack(Config &config, ChannelAnalyzer &analyzer, const TrackMetaTextInfo &metaTextInfo)
        : m_config(config), m_analyzer(analyzer), m_metaTextInfo(metaTextInfo)
    {
    }
    void getScriptHeader(std::ofstream &out)
    {
        out << "#----------------File Description-----------------#\n";
        out << "# This file generated by Midi To Mikrotik Converter\n";
        out << "# Visit app repo: https://github.com/altucor/midi_to_mikrotik_converter\n";
        out << "# Pitch shift config: ";
        m_config.pitchShift.toStream(out);
        out << "\n";
        out << "# Original midi file name/path: " << m_config.inFileName << "\n";
        out << "# Track BPM: " << std::to_string(m_config.bpm) << "\n";
        out << "# MIDI Channel: " << std::to_string(m_analyzer.channel()) << "\n";
        out << "# Number of notes: " << m_analyzer.notesCount() << "\n";
        out << "# Track length: " << Utils::getTrackTimeLength(m_analyzer.duration()) << "\n";
        out << "# Track name: " << m_metaTextInfo.track << "\n";
        out << "# Instrument name: " << m_metaTextInfo.instrument << "\n";
        out << "# Track text: " << m_metaTextInfo.text << "\n";
        out << "# Track copyright: " << m_metaTextInfo.copyright << "\n";
        out << "# Vocals: " << m_metaTextInfo.lyric << "\n";
        out << "# Text marker: " << m_metaTextInfo.marker << "\n";
        out << "# Cue Point: " << m_metaTextInfo.cue << "\n";
        out << "#-------------------------------------------------#\n\n";
    }

    int exportScript()
    {
        /*
         * later_bitches.mid
         * later_bitches-3xOsc-1-0.txt
         */

        if (m_analyzer.notesCount() == 0)
        {
            return 0;
        }

        std::string outFileName(m_config.outFileName);
        outFileName += "-";
        // outFileName += m_track.getName();
        outFileName += "-";
        // outFileName += std::to_string(track_index);
        outFileName += "-";
        outFileName += std::to_string(m_analyzer.channel());
        outFileName += ".txt";

        std::ofstream outputFile;
        outputFile.open(outFileName);
        if (!outputFile.is_open())
        {
            BOOST_LOG_TRIVIAL(info) << "[MikrotikTrack] export failed cannot create output file: " << outFileName;
            return -1;
        }

        // BOOST_LOG_TRIVIAL(info) << "[MikrotikTrack] export started for track: " << m_index << " channel: " << (uint32_t)channel;
        getScriptHeader(outputFile);
        m_analyzer.toScript(outputFile);

        BOOST_LOG_TRIVIAL(info) << "[MikrotikTrack] export finished";
        return 0;
    }

private:
    Config &m_config;
    ChannelAnalyzer m_analyzer;
    TrackMetaTextInfo m_metaTextInfo;
};
